{
    "docs": [
        {
            "location": "/",
            "text": "Installation Guide\n\n\n\n\n\nThese pages should help you to get started setting up the computing environment on your machine ready for the course \"Programming Practices for Research in Economics\" at the University of Zurich in Fall 2017.\n\n\nPlease attempt to install necessary software and packages prior to the beginning of the course.\n\n\n\n\nSummary\n\n\n\n\nIf everything goes smoothly, you should be able to complete the installation in one sitting within 60-120 minutes.\n\n\nPlease follow the steps one-by-one in the order they appear on the side bar and do not deviate from them, unless you really know what you are doing.\n\n\nIf you find any outdated links or unclear descriptions, email us at \nprogramming@econ.uzh.ch\n so that we can update the instructions or clarify as needed.\n\n\nWhere necessary, we have provided instructions for Mac, Windows and Linux machines.\n\n\n\n\n\n\n\n\nInstallation Help\n\n\nPlease try and install all the software before the course begins.\nIf you are struggling we are able to help - but we expect you have tried to work through the guide yourself.\nDetails of the Installation help session are found below:\n\n\n\n\nWhen: Friday, August 25th, 9.30am - 12.30am\n\n\nWhere: SOF-E-09",
            "title": "Getting Started"
        },
        {
            "location": "/#installation-guide",
            "text": "These pages should help you to get started setting up the computing environment on your machine ready for the course \"Programming Practices for Research in Economics\" at the University of Zurich in Fall 2017.  Please attempt to install necessary software and packages prior to the beginning of the course.   Summary   If everything goes smoothly, you should be able to complete the installation in one sitting within 60-120 minutes.  Please follow the steps one-by-one in the order they appear on the side bar and do not deviate from them, unless you really know what you are doing.  If you find any outdated links or unclear descriptions, email us at  programming@econ.uzh.ch  so that we can update the instructions or clarify as needed.  Where necessary, we have provided instructions for Mac, Windows and Linux machines.     Installation Help  Please try and install all the software before the course begins.\nIf you are struggling we are able to help - but we expect you have tried to work through the guide yourself.\nDetails of the Installation help session are found below:   When: Friday, August 25th, 9.30am - 12.30am  Where: SOF-E-09",
            "title": "Installation Guide"
        },
        {
            "location": "/commandLine/",
            "text": "Command Line Tools\n\n\nA command-line interface or command language interpreter (CLI), also known as a terminal, is a means of interacting with a computer program where the user issues commands to the program in the form of successive lines of text (command lines).\n\n\nThroughout the course we will emphasize use of the terminal and executing commands within it as our modus operandi.\n\n\nWindows Users\n\n\nSo that we can work as closely as possible to the Mac and Linux users we will install \nCygwin\n.\n\n\n\n\n\n\nDownload Cygwin \nhere\n and use the graphical installer. Accept all the default options.\n\n\n\n\n\n\nVerify your installation by opening Cygwin. When it opens you should see a black box with some text that looks like:\n\n\n\n\n\n\nuserName@computerName: ~$\n\n\n\n\ni.e. for Lachlan he sees:\n\n\nlachlan@lachlan-ThinkPad-T460s: ~$\n\n\n\n\nWe will explain what all this means in the first day or so of the course.\n\n\n\n\nWhy Cygwin\n\n\n\n\n\n\nWe will uses Cygwin as our command line tool, and unlike other Windows shells such as PowerShell it uses Unix syntax.\n\n\n\n\n\n\nAnywhere throughout the remainder of the installation guide where we suggest you to enter a command into a terminal, enter the text-based command into your Cygwin terminal followed by pressing \nReturn\n, for example:\n\n\nuserName@computerName: ~$ whoami\n\n\n\n\n\n\n\nShould return your username.\n\n\n\n\n\n\nDo Not Delete the Install File\n\n\n\n\nDo not delete the setup-x86_64.exe file.\n It needs to be kept so that we can add on some additional packages to use in the course.\n\n\n\n\n\n\nMac Users\n\n\nA command line interface comes already installed with OSX.\n\n\nYou will need to install some other software from the terminal thoughout the course, so it will be useful to install some additional \"command line tools\" now:\n\n\n\n\nFirst we want to install X-code command line tools. Open a terminal by searching for it with spotlight, \ncmd + spacebar\n then type terminal and press \nReturn\n when it appears. Then, copy and paste the following\n\n\n\n\nxcode-select --install\n\n\n\n\n\n\nSecond,  install Homebrew by opening a terminal and pasting the following command:\n\n\n\n\nruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n\n\n\n\n\n\nTo verify that Homebrew installed correctly, enter the following into your terminal\n\n\n\n\nbrew doctor\n\n\n\n\nAnd you should see the following output\n\n\nYour system is ready to brew\n\n\n\n\nLinux Users\n\n\nNothing needs to be done. You can open a terminal session with \nCrtl\n + \nAlt\n + \nT\n.",
            "title": "Command Line Tools"
        },
        {
            "location": "/commandLine/#command-line-tools",
            "text": "A command-line interface or command language interpreter (CLI), also known as a terminal, is a means of interacting with a computer program where the user issues commands to the program in the form of successive lines of text (command lines).  Throughout the course we will emphasize use of the terminal and executing commands within it as our modus operandi.",
            "title": "Command Line Tools"
        },
        {
            "location": "/commandLine/#windows-users",
            "text": "So that we can work as closely as possible to the Mac and Linux users we will install  Cygwin .    Download Cygwin  here  and use the graphical installer. Accept all the default options.    Verify your installation by opening Cygwin. When it opens you should see a black box with some text that looks like:    userName@computerName: ~$  i.e. for Lachlan he sees:  lachlan@lachlan-ThinkPad-T460s: ~$  We will explain what all this means in the first day or so of the course.   Why Cygwin    We will uses Cygwin as our command line tool, and unlike other Windows shells such as PowerShell it uses Unix syntax.    Anywhere throughout the remainder of the installation guide where we suggest you to enter a command into a terminal, enter the text-based command into your Cygwin terminal followed by pressing  Return , for example:  userName@computerName: ~$ whoami    Should return your username.    Do Not Delete the Install File   Do not delete the setup-x86_64.exe file.  It needs to be kept so that we can add on some additional packages to use in the course.",
            "title": "Windows Users"
        },
        {
            "location": "/commandLine/#mac-users",
            "text": "A command line interface comes already installed with OSX.  You will need to install some other software from the terminal thoughout the course, so it will be useful to install some additional \"command line tools\" now:   First we want to install X-code command line tools. Open a terminal by searching for it with spotlight,  cmd + spacebar  then type terminal and press  Return  when it appears. Then, copy and paste the following   xcode-select --install   Second,  install Homebrew by opening a terminal and pasting the following command:   ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"   To verify that Homebrew installed correctly, enter the following into your terminal   brew doctor  And you should see the following output  Your system is ready to brew",
            "title": "Mac Users"
        },
        {
            "location": "/commandLine/#linux-users",
            "text": "Nothing needs to be done. You can open a terminal session with  Crtl  +  Alt  +  T .",
            "title": "Linux Users"
        },
        {
            "location": "/textEditor/",
            "text": "Text Editors\n\n\nA good text editor lies at the heart of any serious programmer's toolkit: It can do almost anything and makes you much more productive. The editors built into each program are generally are not an option (we will find certain cases where you may want to use them).\n\n\n\n\nUpdated for 2017\n\n\nThis year we are encouraging all participants to use the text editor \nAtom\n.\nWe hope this helps smooth out differences between text editors.\n\n\n\n\nPlease download, install it along with the necessary packages and stick with it for at least the duration of the course and assignment to get a feel for how it works.\nThere is a slight learning curve, but soon you hopefully be wondering why no-one forced you to do this before!\nWe should get you past the steepest part of the learning curve during the course itself, so we don't anticipate you struggling on your own.\n\n\n\n\nNote\n\n\nNone of the skills we learn in the course are tied to Atom, so if you do decide to move away to another editor, nothing will be lost.\n\n\n\n\n\n\n\nInstalling Atom\n\n\nMac and Windows Users\n\n\nGo to the \ndownloads page\n and download the live installer for your operating system.\n\n\nLinux/Ubuntu users\n\n\nEnter the following information to add a repository that has the Atom installation, then press \nReturn\n:\n\n\nsudo add-apt-repository ppa:webupd8team/atom\n\n\n\n\nInstall Atom by entering the following commands into a terminal and then pressing \nReturn:\n\n\nsudo apt update; sudo apt install atom\n\n\n\n\nVerifying Atom Installation for Linux and Mac\n\n\nWe want Atom to be available from the command line. For Mac and Linux Users this is the default so if you type the following into the command line:\n\n\natom --version\n\n\n\n\nfollowed by pressing \nReturn\n you should see output like the following\n\n\nAtom    : 1.12.7\nElectron: 1.3.13\nChrome  : 52.0.2743.82\nNode    : 6.5.0\n\n\n\n\nMake sure that the version numbers are equal to whats above or newer.\n\n\n\n\nAdditional Step for Windows:\n\n\nGetting things to run from the command line for us is a bit harder. You will need local administration rights for your computer, but you should have these on your personal computers or those owned by the Department.\n\n\nRight-click on Computer. Then go to \"Properties\" and select the tab \"Advanced System Settings\". Choose \"Environment Variables\" and select \nPath\n from the list of system variables.\n\n\nIf you accepted all defaults during your installation, and didn't have any other non-default setting prior to starting this guide, choose \nEdit.\n\n\nOn Windows 7 or 8 machines:\n\n Append the following (i.e., do not overwrite the previous value) modifying the string, with your relevant \nusername\n:\n\n\n    ;C:\\Users\\username\\AppData\\Local\\atom\\bin\n\n\n\nto the variable value \u2013 make sure the rest remains as it is and do not include spaces between the \";\" and preceeding text.\n\n\nOn Windows 10 machines:\n\nClick \nNew\n and paste the following string, modifying the \nusername\n\n\n    C:\\Users\\username\\AppData\\Local\\atom\\bin\n\n\n\nClick on \nOK\n as often as needed.\n\n\nClose your current terminal session, open a new one, and again try \natom .\n - the Atom editor will open if this was successful.\n\n\n\n\nAdditional Packages for Atom\n\n\nOne of the advantages of Atom is that there are many \npackages\n that make your life easier, ranging from simple syntax highlighting to environments that can mimic a complete graphical user interface.\n\n\nFor this course, we will install the minimum number of packages necessary to make your coding life easier.\n\n\nInstalling Additional Packages for Atom\n\n\nAtom's package manager is built in to the program itself and is relatively easy to interact with.\nTo access Atom's settings press \nCtrl + ,\n on your keyboard then click on the \nInstall\n tab which is visible on the left hand side.\n\n\nOn the Installation page there is a prompt where you can type in a package name and then press \nReturn\n and Atom will search for that package for you and return results with similar names.\nWhen you find the package that you need, you click the blue 'Install' button and the package will be installed.\n\n\nFor this course, please install the following packages:\n\n\n\n\nautocomplete-r\n\n\nautocomplete-python\n\n\nautoflow\n\n\nlanguage-sql\n\n\nlanguage-r\n\n\nlinter\n\n\nlinter-python\n\n\nlinter-lintr\n\n\ntablr\n\n\n\n\nIf during the installation of a package Atom asks to install dependencies, always choose to accept.\n\n\n\n\nTip\n\n\nIf you decide to stick with Atom after this course, you may find the following packages useful in your day to day work:\n\n\n\n\nlanguage-latex\n\n\nlanguage-markdown\n\n\nlanguage-matlab\n\n\nlanguage-stata\n\n\nmarkdown-writer\n\n\nmarkdown-preview-plus\n\n\nwhitespace\n\n\n\n\nFeel free to ask us for whatever other packages we use to make our programming lives easier during some downtime.",
            "title": "Text Editor"
        },
        {
            "location": "/textEditor/#text-editors",
            "text": "A good text editor lies at the heart of any serious programmer's toolkit: It can do almost anything and makes you much more productive. The editors built into each program are generally are not an option (we will find certain cases where you may want to use them).   Updated for 2017  This year we are encouraging all participants to use the text editor  Atom .\nWe hope this helps smooth out differences between text editors.   Please download, install it along with the necessary packages and stick with it for at least the duration of the course and assignment to get a feel for how it works.\nThere is a slight learning curve, but soon you hopefully be wondering why no-one forced you to do this before!\nWe should get you past the steepest part of the learning curve during the course itself, so we don't anticipate you struggling on your own.   Note  None of the skills we learn in the course are tied to Atom, so if you do decide to move away to another editor, nothing will be lost.",
            "title": "Text Editors"
        },
        {
            "location": "/textEditor/#installing-atom",
            "text": "",
            "title": "Installing Atom"
        },
        {
            "location": "/textEditor/#mac-and-windows-users",
            "text": "Go to the  downloads page  and download the live installer for your operating system.",
            "title": "Mac and Windows Users"
        },
        {
            "location": "/textEditor/#linuxubuntu-users",
            "text": "Enter the following information to add a repository that has the Atom installation, then press  Return :  sudo add-apt-repository ppa:webupd8team/atom  Install Atom by entering the following commands into a terminal and then pressing  Return:  sudo apt update; sudo apt install atom",
            "title": "Linux/Ubuntu users"
        },
        {
            "location": "/textEditor/#verifying-atom-installation-for-linux-and-mac",
            "text": "We want Atom to be available from the command line. For Mac and Linux Users this is the default so if you type the following into the command line:  atom --version  followed by pressing  Return  you should see output like the following  Atom    : 1.12.7\nElectron: 1.3.13\nChrome  : 52.0.2743.82\nNode    : 6.5.0  Make sure that the version numbers are equal to whats above or newer.   Additional Step for Windows:  Getting things to run from the command line for us is a bit harder. You will need local administration rights for your computer, but you should have these on your personal computers or those owned by the Department.  Right-click on Computer. Then go to \"Properties\" and select the tab \"Advanced System Settings\". Choose \"Environment Variables\" and select  Path  from the list of system variables.  If you accepted all defaults during your installation, and didn't have any other non-default setting prior to starting this guide, choose  Edit.  On Windows 7 or 8 machines: \n Append the following (i.e., do not overwrite the previous value) modifying the string, with your relevant  username :      ;C:\\Users\\username\\AppData\\Local\\atom\\bin  to the variable value \u2013 make sure the rest remains as it is and do not include spaces between the \";\" and preceeding text.  On Windows 10 machines: \nClick  New  and paste the following string, modifying the  username      C:\\Users\\username\\AppData\\Local\\atom\\bin  Click on  OK  as often as needed.  Close your current terminal session, open a new one, and again try  atom .  - the Atom editor will open if this was successful.",
            "title": "Verifying Atom Installation for Linux and Mac"
        },
        {
            "location": "/textEditor/#additional-packages-for-atom",
            "text": "One of the advantages of Atom is that there are many  packages  that make your life easier, ranging from simple syntax highlighting to environments that can mimic a complete graphical user interface.  For this course, we will install the minimum number of packages necessary to make your coding life easier.",
            "title": "Additional Packages for Atom"
        },
        {
            "location": "/textEditor/#installing-additional-packages-for-atom",
            "text": "Atom's package manager is built in to the program itself and is relatively easy to interact with.\nTo access Atom's settings press  Ctrl + ,  on your keyboard then click on the  Install  tab which is visible on the left hand side.  On the Installation page there is a prompt where you can type in a package name and then press  Return  and Atom will search for that package for you and return results with similar names.\nWhen you find the package that you need, you click the blue 'Install' button and the package will be installed.  For this course, please install the following packages:   autocomplete-r  autocomplete-python  autoflow  language-sql  language-r  linter  linter-python  linter-lintr  tablr   If during the installation of a package Atom asks to install dependencies, always choose to accept.   Tip  If you decide to stick with Atom after this course, you may find the following packages useful in your day to day work:   language-latex  language-markdown  language-matlab  language-stata  markdown-writer  markdown-preview-plus  whitespace   Feel free to ask us for whatever other packages we use to make our programming lives easier during some downtime.",
            "title": "Installing Additional Packages for Atom"
        },
        {
            "location": "/gitInstall/",
            "text": "Installing Git and Setting Up Accounts\n\n\nGit is a Version Control System (VCS) that has gained a lot of traction among the programming community.\nWe will want to use version control to keep track of the files we write, and the changes we make to them.\n\n\nAccount Creation\n\n\nDuring the course we will show you how to use \nGitHub\n to host some of your work and do code related project management. You will need to set up an account:\n\n\n\n\n\n\n\nPlease \nregister\n for a \nGitHub\n account\n\n\n\n\n\n\n\n\nMac Users\n\n\nOn MacOS, download and install Git from \nhere\n.\nAlso install the command-line auto-completion script, as described \nhere\n.\n\n\nLinux Users\n\n\nFollow the steps documented \nhere\n to install on Linux from the terminal.\n\n\nWindows Users\n\n\nDownload and install the latest versions of:\n\n\n\n\nmsysgit\n, and\n\n\nTortoiseGit\n\n\n\n\nAfter installing these programs use Windows Explorer to go to a folder that contains some documents (any folder) and right click on it.\nYou should see some additional items - \"GitBash\" and \"TortoiseGit\" appear in the context menu upon right-clicking.\n\n\n\n\nWindows PATH Setting Redux\n\n\nWe also want Git from the command line, so we again need to update our PATH settings.\n\n\nRight-click on Computer. Then go to \"Properties\" and select the tab \"Advanced System settings\". Choose \"Environment Variables\" and select \nPath\n from the list of system variables.\n\n\nChoose \nEdit\n.\n\n\nOn Windows 7 or 8 machines:\n\nIf you accepted all defaults during your installation, and didn't have any other non-default setting prior to starting this guide, modifying the following string, copy and paste the following string without spaces at the start or end:\n\n\n   ;C:\\Program Files\\Git\\bin\n\n\n\nOn Windows 10 machines:\n\nClick \nNew\n and paste the following string:\n\n\n    C:\\Program Files\\Git\\bin\n\n\n\nClick on \nOK\n as often as needed.\n\n\n\n\nVerifying your install\n\n\n\n\n\nTo verify your installation, type the following command in a terminal and press the return key:\n\n\n   git --version\n\n\n\nYou should get an output that looks like:\n\n\n    git version 2.7.4\n\n\n\nEnsure that you have a version greater than \n2.7.1\n installed.",
            "title": "Git"
        },
        {
            "location": "/gitInstall/#installing-git-and-setting-up-accounts",
            "text": "Git is a Version Control System (VCS) that has gained a lot of traction among the programming community.\nWe will want to use version control to keep track of the files we write, and the changes we make to them.",
            "title": "Installing Git and Setting Up Accounts"
        },
        {
            "location": "/gitInstall/#account-creation",
            "text": "During the course we will show you how to use  GitHub  to host some of your work and do code related project management. You will need to set up an account:    Please  register  for a  GitHub  account",
            "title": "Account Creation"
        },
        {
            "location": "/gitInstall/#mac-users",
            "text": "On MacOS, download and install Git from  here .\nAlso install the command-line auto-completion script, as described  here .",
            "title": "Mac Users"
        },
        {
            "location": "/gitInstall/#linux-users",
            "text": "Follow the steps documented  here  to install on Linux from the terminal.",
            "title": "Linux Users"
        },
        {
            "location": "/gitInstall/#windows-users",
            "text": "Download and install the latest versions of:   msysgit , and  TortoiseGit   After installing these programs use Windows Explorer to go to a folder that contains some documents (any folder) and right click on it.\nYou should see some additional items - \"GitBash\" and \"TortoiseGit\" appear in the context menu upon right-clicking.   Windows PATH Setting Redux  We also want Git from the command line, so we again need to update our PATH settings.  Right-click on Computer. Then go to \"Properties\" and select the tab \"Advanced System settings\". Choose \"Environment Variables\" and select  Path  from the list of system variables.  Choose  Edit .  On Windows 7 or 8 machines: \nIf you accepted all defaults during your installation, and didn't have any other non-default setting prior to starting this guide, modifying the following string, copy and paste the following string without spaces at the start or end:     ;C:\\Program Files\\Git\\bin  On Windows 10 machines: \nClick  New  and paste the following string:      C:\\Program Files\\Git\\bin  Click on  OK  as often as needed.",
            "title": "Windows Users"
        },
        {
            "location": "/gitInstall/#verifying-your-install",
            "text": "To verify your installation, type the following command in a terminal and press the return key:     git --version  You should get an output that looks like:      git version 2.7.4  Ensure that you have a version greater than  2.7.1  installed.",
            "title": "Verifying your install"
        },
        {
            "location": "/python/",
            "text": "Installing Anaconda Python\n\n\nAnaconda is a pre-packaged Python distribution for scientific users.\n\n\nDirect your browser to \nAnaconda download page\n and download the Python 3.6 Graphical Installer for your machine.\nFollow the steps provided on the website.\n\n\nDuring the installation you will be asked whether you want Anaconda Python to be added to your PATH. \nClick yes!\n\n\nTo verify that the correct version of Python has been installed and was made available in your PATH settings, open a \nnew\n terminal interface and enter:\n\n\npython --version\n\n\n\n\nfollowed by hitting the \nReturn\n key.\n\n\nYou should see the following information returned:\n\n\n\n\nWindows users:\n\n\n\n\nPython 3.6.1 :: Anaconda 4.4.0 (64-bit)\n\n\n\n\n\n\nLinux/Ubuntu users:\n\n\n\n\nPython 3.6.2 :: Anaconda custom (64-bit)\n\n\n\n\n\n\nMac users:\nyou may get this:\n\n\n\n\nPython 3.6.1 |  Anaconda 4.4.0 (x86_64)\n\n\n\n\nor this:\n\n\nPython 3.6.1 ::  Anaconda 4.4.0 (x86_64)",
            "title": "Python"
        },
        {
            "location": "/python/#installing-anaconda-python",
            "text": "Anaconda is a pre-packaged Python distribution for scientific users.  Direct your browser to  Anaconda download page  and download the Python 3.6 Graphical Installer for your machine.\nFollow the steps provided on the website.  During the installation you will be asked whether you want Anaconda Python to be added to your PATH.  Click yes!  To verify that the correct version of Python has been installed and was made available in your PATH settings, open a  new  terminal interface and enter:  python --version  followed by hitting the  Return  key.  You should see the following information returned:   Windows users:   Python 3.6.1 :: Anaconda 4.4.0 (64-bit)   Linux/Ubuntu users:   Python 3.6.2 :: Anaconda custom (64-bit)   Mac users:\nyou may get this:   Python 3.6.1 |  Anaconda 4.4.0 (x86_64)  or this:  Python 3.6.1 ::  Anaconda 4.4.0 (x86_64)",
            "title": "Installing Anaconda Python"
        },
        {
            "location": "/python-more/",
            "text": "Additional Python packages\n\n\nAnaconda's Python Distribution comes with many of the packages we need to do scientific computing.\nIf you're interested in all the packages included, click \nhere\n and go to the Python 3.6 tab.\n\n\nHowevever, you may come across packages that are not installed by default.\nIn this case we recommend you use the \npip\n package management tool to install them.\n\n\nFor this course, we will need the package \nSelenium\n as part of the web scraping tool kit we will build up. We install it by entering the following into a terminal:\n\n\npip install selenium\n\n\n\n\npip\n will then go through and install the package we asked for, and any dependencies.\nIf this succeeded, the last line it printed out should be:\n\n\nSuccessfully installed selenium-3.5.0\n\n\n\n\nMore packages\n\n\nPlease also install the following packages:\n\n\n\n\nlinearmodels",
            "title": "Python Extras"
        },
        {
            "location": "/python-more/#additional-python-packages",
            "text": "Anaconda's Python Distribution comes with many of the packages we need to do scientific computing.\nIf you're interested in all the packages included, click  here  and go to the Python 3.6 tab.  Howevever, you may come across packages that are not installed by default.\nIn this case we recommend you use the  pip  package management tool to install them.  For this course, we will need the package  Selenium  as part of the web scraping tool kit we will build up. We install it by entering the following into a terminal:  pip install selenium  pip  will then go through and install the package we asked for, and any dependencies.\nIf this succeeded, the last line it printed out should be:  Successfully installed selenium-3.5.0",
            "title": "Additional Python packages"
        },
        {
            "location": "/python-more/#more-packages",
            "text": "Please also install the following packages:   linearmodels",
            "title": "More packages"
        },
        {
            "location": "/webscraping_drivers/",
            "text": "Web Scraping Using an Automated Browser\n\n\nSometimes when we scrape the web, we need to automate our computer to open a web browser to gather information from each page.\nThis is especially true when the site we want to scrape has content that is loaded dynamically with javascript.\n\n\nWe will install two packages to help us here:\n\n\n\n\nChromedriver\n\n\nPhantomjs\n\n\n\n\nInstalling most of this stuff is operating system specific, hence so are the instructions below.\n\n\nMac Users\n\n\nMake sure your \nhomebrew\n package is up-to-date. To do so, open a terminal and enter\n\n\nbrew update\n\n\n\n\nChromedriver\n\n\n\n\nInstall via homebrew:\n\n\n\n\nbrew install chromedriver\n\n\n\n\n\n\nVerify your install, by entering the following in your terminal. The expected output is \nChromeDriver 2.3X.X\n\n\n\n\nchromedriver --version\n\n\n\n\nPhantomjs\n\n\n\n\nInstall via homebrew:\n\n\n\n\nbrew install phantomjs\n\n\n\n\n\n\nVerify your install, by entering the following in your terminal. The expected output is \n2.1.1\n\n\n\n\nphantomjs --version\n\n\n\n\nWindows Users\n\n\nChromedriver\n\n\n\n\nInstall Google Chrome from \nhere\n\n\nDownload the windows version of Chromedriver from \nhere\n.\n\n\nExtract the contents from the zip file, and place them in a new directory \nC:\\chromedriver\n\n\nAdd the directory \nC:\\chromedriver\n to your PATH.\n\n\nIf this went successfully, open a new Cygwin session, and enter \nchromedriver --version\n, you should get output that looks like \nChromeDriver 2.3X.XX\n\n\n\n\nPhantomjs\n\n\n\n\nClick \nhere\n and go to the Windows download section. Download the zip file for version 2.1.1.\n\n\nRight click on the downloaded phantomJs zip file to Extract All\n\n\nCopy all the contents located in phantomjs-X.X.X-windows\n\n\nCreate a new directory \nC:\\PhantomJs\\bin\\phantomjs\n\n\nPaste the contents on the extracted phantomjs-X.X.X-windows directory here\n\n\nAdd the directory, \nC:\\PhantomJs\\bin\\phantomjs\n, to your PATH like we have done before.\n\n\nIf this worked succesfully open a new Cygwin session, and enter \nphantomjs --version\n should return the version \n2.1.1\n\n\n\n\n\n\nHat-tip\n\n\nWe borrowed liberally from \nJoe Coltantonio\n for instructions on installing Phantomjs.\n\n\n\n\nLinux Users\n\n\nChromedriver\n\n\n\n\nOpen a terminal session\n\n\nInstall Google Chrome for Debian/Ubuntu by pasting the following and then pressing \nReturn\n\n\n\n\nsudo apt-get install libxss1 libappindicator1 libindicator7\nwget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb\n\nsudo dpkg -i google-chrome*.deb\nsudo apt-get install -f\n\n\n\n\n\n\nInstall \nxvfb\n so chrom can run 'headless' by pasting the following and then pressing \nReturn\n\n\n\n\nsudo apt-get install xvfb\n\n\n\n\n\n\nInstall Chromedriver by pasting the following and then pressing \nReturn\n:\n\n\n\n\nsudo apt-get install unzip\n\nwget -N http://chromedriver.storage.googleapis.com/2.31/chromedriver_linux64.zip\nunzip chromedriver_linux64.zip\nchmod +x chromedriver\n\nsudo mv -f chromedriver /usr/local/share/chromedriver\nsudo ln -s /usr/local/share/chromedriver /usr/local/bin/chromedriver\nsudo ln -s /usr/local/share/chromedriver /usr/bin/chromedriver\n\n\n\n\n\n\nYour install worked, you should get \nChromeDriver 2.31.488763\n returned if the installation was successful\n\n\n\n\nchromedriver --version\n\n\n\n\nPhantomjs\n\n\n\n\nOpen a terminal and paste the following:\n\n\n\n\nsudo apt-get install build-essential chrpath libssl-dev libxft-dev \\\nlibfreetype6-dev libfreetype6 libfontconfig1-dev libfontconfig1 -y\n\n\n\n\n\n\nDownload Phantomjs using your terminal:\n\n\n\n\nsudo wget https://bitbucket.org/ariya/phantomjs/downloads/phantomjs-2.1.1-linux-x86_64.tar.bz2\n\n\n\n\n\n\nExtract the archive:\n\n\n\n\nsudo tar xvjf phantomjs-2.1.1-linux-x86_64.tar.bz2 -C /usr/local/share/\n\n\n\n\n\n\nCreate a symbolic link\n\n\n\n\nsudo ln -s /usr/local/share/phantomjs-2.1.1-linux-x86_64/bin/phantomjs /usr/local/bin/\n\n\n\n\n\n\nVerify the installation, and you should get \n2.1.1\n printed out\n\n\n\n\nphantomjs --version\n\n\n\n\n\n\nHat-tip\n\n\nWe borrowed heavily from the guys and girls at Vultr to provide instructions for \nPhantomjs\n.\nWe borrowed quite liberally from Christopher Su to for instructions on \ninstalling Chrome and Chromedriver\n.",
            "title": "Webscraping"
        },
        {
            "location": "/webscraping_drivers/#web-scraping-using-an-automated-browser",
            "text": "Sometimes when we scrape the web, we need to automate our computer to open a web browser to gather information from each page.\nThis is especially true when the site we want to scrape has content that is loaded dynamically with javascript.  We will install two packages to help us here:   Chromedriver  Phantomjs   Installing most of this stuff is operating system specific, hence so are the instructions below.",
            "title": "Web Scraping Using an Automated Browser"
        },
        {
            "location": "/webscraping_drivers/#mac-users",
            "text": "Make sure your  homebrew  package is up-to-date. To do so, open a terminal and enter  brew update",
            "title": "Mac Users"
        },
        {
            "location": "/webscraping_drivers/#chromedriver",
            "text": "Install via homebrew:   brew install chromedriver   Verify your install, by entering the following in your terminal. The expected output is  ChromeDriver 2.3X.X   chromedriver --version",
            "title": "Chromedriver"
        },
        {
            "location": "/webscraping_drivers/#phantomjs",
            "text": "Install via homebrew:   brew install phantomjs   Verify your install, by entering the following in your terminal. The expected output is  2.1.1   phantomjs --version",
            "title": "Phantomjs"
        },
        {
            "location": "/webscraping_drivers/#windows-users",
            "text": "",
            "title": "Windows Users"
        },
        {
            "location": "/webscraping_drivers/#chromedriver_1",
            "text": "Install Google Chrome from  here  Download the windows version of Chromedriver from  here .  Extract the contents from the zip file, and place them in a new directory  C:\\chromedriver  Add the directory  C:\\chromedriver  to your PATH.  If this went successfully, open a new Cygwin session, and enter  chromedriver --version , you should get output that looks like  ChromeDriver 2.3X.XX",
            "title": "Chromedriver"
        },
        {
            "location": "/webscraping_drivers/#phantomjs_1",
            "text": "Click  here  and go to the Windows download section. Download the zip file for version 2.1.1.  Right click on the downloaded phantomJs zip file to Extract All  Copy all the contents located in phantomjs-X.X.X-windows  Create a new directory  C:\\PhantomJs\\bin\\phantomjs  Paste the contents on the extracted phantomjs-X.X.X-windows directory here  Add the directory,  C:\\PhantomJs\\bin\\phantomjs , to your PATH like we have done before.  If this worked succesfully open a new Cygwin session, and enter  phantomjs --version  should return the version  2.1.1    Hat-tip  We borrowed liberally from  Joe Coltantonio  for instructions on installing Phantomjs.",
            "title": "Phantomjs"
        },
        {
            "location": "/webscraping_drivers/#linux-users",
            "text": "",
            "title": "Linux Users"
        },
        {
            "location": "/webscraping_drivers/#chromedriver_2",
            "text": "Open a terminal session  Install Google Chrome for Debian/Ubuntu by pasting the following and then pressing  Return   sudo apt-get install libxss1 libappindicator1 libindicator7\nwget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb\n\nsudo dpkg -i google-chrome*.deb\nsudo apt-get install -f   Install  xvfb  so chrom can run 'headless' by pasting the following and then pressing  Return   sudo apt-get install xvfb   Install Chromedriver by pasting the following and then pressing  Return :   sudo apt-get install unzip\n\nwget -N http://chromedriver.storage.googleapis.com/2.31/chromedriver_linux64.zip\nunzip chromedriver_linux64.zip\nchmod +x chromedriver\n\nsudo mv -f chromedriver /usr/local/share/chromedriver\nsudo ln -s /usr/local/share/chromedriver /usr/local/bin/chromedriver\nsudo ln -s /usr/local/share/chromedriver /usr/bin/chromedriver   Your install worked, you should get  ChromeDriver 2.31.488763  returned if the installation was successful   chromedriver --version",
            "title": "Chromedriver"
        },
        {
            "location": "/webscraping_drivers/#phantomjs_2",
            "text": "Open a terminal and paste the following:   sudo apt-get install build-essential chrpath libssl-dev libxft-dev \\\nlibfreetype6-dev libfreetype6 libfontconfig1-dev libfontconfig1 -y   Download Phantomjs using your terminal:   sudo wget https://bitbucket.org/ariya/phantomjs/downloads/phantomjs-2.1.1-linux-x86_64.tar.bz2   Extract the archive:   sudo tar xvjf phantomjs-2.1.1-linux-x86_64.tar.bz2 -C /usr/local/share/   Create a symbolic link   sudo ln -s /usr/local/share/phantomjs-2.1.1-linux-x86_64/bin/phantomjs /usr/local/bin/   Verify the installation, and you should get  2.1.1  printed out   phantomjs --version   Hat-tip  We borrowed heavily from the guys and girls at Vultr to provide instructions for  Phantomjs .\nWe borrowed quite liberally from Christopher Su to for instructions on  installing Chrome and Chromedriver .",
            "title": "Phantomjs"
        },
        {
            "location": "/r/",
            "text": "R and RStudio\n\n\nR is a language for statistical computing and graphics.\nR's use in the data science and econometrics community has taken off over recent years and (at a bare minimum) should be considered as an open source replacement to Stata.\n\n\nInstalling R\n\n\nGo to the \nR homepage\n and download the installer for your operating system.\n\n\nThe current version of R is 3.4\n\n\nInstalling RStudio\n\n\nRStudio provides an easy to work with interface to R, and its format should feel familiar to Stata and Matlab users.\n\n\nDownload and install RStudio for your operating system from \nhere\n.\n\n\nVerifying your Install of R\n\n\nOpen a terminal and enter:\n\n\nR --version\n\n\n\n\nfollowed by pressing \nReturn\n.\n\n\nThe expected output begins with:\n\n\nR version 3.4.1 (2017-06-30) -- \"Single Candle\"\nCopyright (C) 2017 The R Foundation for Statistical Computing\n\n\n\n\n\n\n Windows PATH Setting redux\n\n\nIf you want R available from the command line (it is by default for Mac and Linux), we again need to update our PATH settings.\n\n\nRight-click on Computer. Then go to \"Properties\" and select the tab \"Advanced System settings\". Choose \"Environment Variables\" and select \nPath\n from the list of system variables.\n\n\nChoose \nEdit\n.\n\n\nWindows 7 and 8 machines:\n\nIf you accepted all defaults during your installation, and didn't have any other non-default setting prior to starting this guide, copy and paste the following string without spaces at the start or end:\n\n\n    ;C:\\Program Files\\R\\R-3.4.1\\bin\n\n\n\nWindows 10 machines:\n\nClick \nNew\n and paste the following string:\n\n\n    C:\\Program Files\\R\\R-3.4.1\\bin\n\n\n\nClick on \nOK\n as often as needed.\n\n\nAfter you have done this, open a \nnew\n terminal and try and verify your install.\n\n\n\n\nInstalling Additional R Packages\n\n\nWe will need some additional libraries to conduct our statistical analysis. Proceed as follows:\n\n\n\n\nOpen RStudio\n\n\nIn the \nconsole\n, copy and paste the following:\n\n\n\n\nuzh_progecon <- c(  \"reshape\", \"rmarkdown\",\n                    \"plm\", \"Hmisc\", \"sandwich\",\n                    \"Ecdat\", \"stargazer\", \"knitr\",\n                    \"httr\", \"rvest\", \"xml2\",\n                    \"xtable\",\"tidyverse\", \"AER\",\n                    \"rdd\", \"car\", \"aod\", \"lmtest\",\n                    \"lfe\", \"nlme\", \"lme4\",\n                    \"erer\", \"margins\",\n                    \"multiwayvcov\", \"RSQLite\", \"dbplyr\")\n\ninstall.packages(uzh_progecon)\n\n\n\n\n\n\nWait until all the packages have been installed and the you are done.\n\n\nIt \nmay\n take a while, so be patient",
            "title": "R"
        },
        {
            "location": "/r/#r-and-rstudio",
            "text": "R is a language for statistical computing and graphics.\nR's use in the data science and econometrics community has taken off over recent years and (at a bare minimum) should be considered as an open source replacement to Stata.",
            "title": "R and RStudio"
        },
        {
            "location": "/r/#installing-r",
            "text": "Go to the  R homepage  and download the installer for your operating system.  The current version of R is 3.4",
            "title": "Installing R"
        },
        {
            "location": "/r/#installing-rstudio",
            "text": "RStudio provides an easy to work with interface to R, and its format should feel familiar to Stata and Matlab users.  Download and install RStudio for your operating system from  here .",
            "title": "Installing RStudio"
        },
        {
            "location": "/r/#verifying-your-install-of-r",
            "text": "Open a terminal and enter:  R --version  followed by pressing  Return .  The expected output begins with:  R version 3.4.1 (2017-06-30) -- \"Single Candle\"\nCopyright (C) 2017 The R Foundation for Statistical Computing    Windows PATH Setting redux  If you want R available from the command line (it is by default for Mac and Linux), we again need to update our PATH settings.  Right-click on Computer. Then go to \"Properties\" and select the tab \"Advanced System settings\". Choose \"Environment Variables\" and select  Path  from the list of system variables.  Choose  Edit .  Windows 7 and 8 machines: \nIf you accepted all defaults during your installation, and didn't have any other non-default setting prior to starting this guide, copy and paste the following string without spaces at the start or end:      ;C:\\Program Files\\R\\R-3.4.1\\bin  Windows 10 machines: \nClick  New  and paste the following string:      C:\\Program Files\\R\\R-3.4.1\\bin  Click on  OK  as often as needed.  After you have done this, open a  new  terminal and try and verify your install.",
            "title": "Verifying your Install of R"
        },
        {
            "location": "/r/#installing-additional-r-packages",
            "text": "We will need some additional libraries to conduct our statistical analysis. Proceed as follows:   Open RStudio  In the  console , copy and paste the following:   uzh_progecon <- c(  \"reshape\", \"rmarkdown\",\n                    \"plm\", \"Hmisc\", \"sandwich\",\n                    \"Ecdat\", \"stargazer\", \"knitr\",\n                    \"httr\", \"rvest\", \"xml2\",\n                    \"xtable\",\"tidyverse\", \"AER\",\n                    \"rdd\", \"car\", \"aod\", \"lmtest\",\n                    \"lfe\", \"nlme\", \"lme4\",\n                    \"erer\", \"margins\",\n                    \"multiwayvcov\", \"RSQLite\", \"dbplyr\")\n\ninstall.packages(uzh_progecon)   Wait until all the packages have been installed and the you are done.  It  may  take a while, so be patient",
            "title": "Installing Additional R Packages"
        },
        {
            "location": "/gis/",
            "text": "Geographical data with R\n\n\nR has many tools to deal with Geo-spatial data.\nWe will introduce the essentials to get you up and started.\n\n\nMac Users\n\n\nFollow the following steps:\n\n\n\n\nDownload \nGDAL complete\n\n\nDoubleclick and install the .dmg file as you are used to on a Mac\n\n\nProceed to \nInstalling Additonal R Packages\n\n\n\n\n\n\nHat-tip\n\n\nWe borrowed heavily from Nick Eubank's installation guide for 'Spatial Data in R' to assist in the Mac installation.\nNick's install guide is available \nhere\n.\n\n\n\n\nLinux Users\n\n\nFollow these steps:\n\n\n\n\n\n\nIn your terminal type the following, then hit \nReturn\n\n\nsudo add-apt-repository ppa:ubuntugis/ppa && sudo apt-get update\n\n\n\n\n\n\n\nHit enter when prompted, then enter the following before again hitting the \nReturn\n key:\n\n\nsudo apt-get install gdal-bin\n\n\n\n\n\n\n\nTo verify after installation, try entering \nogrinfo\n into the a terminal then press \nReturn\n. If the installation was successful, you will see something like this:\n\n\nUsage: ogrinfo [--help-general] [-ro] [-q] [-where restricted_where]\n               [-spat xmin ymin xmax ymax] [-fid fid]\n               [-sql statement] [-al] [-so] [-fields={YES/NO}]\n               [-geom={YES/NO/SUMMARY}][--formats]\n               datasource_name [layer [layer ...]]\n\n\n\n\n\n\n\nProceed to \nInstalling Additonal R Packages\n\n\n\n\n\n\n\n\nHat-tip\n\n\nWe borrowed heavily from Sara Safavi to learn how to install \nGDAL\n on Ubuntu.\nShe provides an install guide \nhere\n.\n\n\n\n\nWindows Users\n\n\n\n\nSuccess\n\n\nFor once, Windows is ahead of the game. We only need to install R packages!\n\n\n\n\nInstalling Additional R Packages\n\n\nWe will need some additional libraries to conduct our GIS analysis. Proceed as follows:\n\n\n\n\nOpen RStudio\n\n\nIn the \nconsole\n, copy and paste the following:\n\n\n\n\nuzh_gistools <- c(\"rgeos\", \"ggmap\", \"sf\",\n                    \"sp\", \"raster\", \"tmaptools\",\n                    \"rgdal\", \"gdalUtils\", \"mapview\", \"tmap\")\n\ninstall.packages(uzh_gistools)\n\n\n\n\n\n\nrgdal problems with Mac\n\n\nThere were quite a few issues with GDAL and rgdal for Mac users.\nWe found \nthis\n stackoverflow post that seemed to solve most problems.\nYou may find it useful in the problem",
            "title": "GIS Tools for R"
        },
        {
            "location": "/gis/#geographical-data-with-r",
            "text": "R has many tools to deal with Geo-spatial data.\nWe will introduce the essentials to get you up and started.",
            "title": "Geographical data with R"
        },
        {
            "location": "/gis/#mac-users",
            "text": "Follow the following steps:   Download  GDAL complete  Doubleclick and install the .dmg file as you are used to on a Mac  Proceed to  Installing Additonal R Packages    Hat-tip  We borrowed heavily from Nick Eubank's installation guide for 'Spatial Data in R' to assist in the Mac installation.\nNick's install guide is available  here .",
            "title": "Mac Users"
        },
        {
            "location": "/gis/#linux-users",
            "text": "Follow these steps:    In your terminal type the following, then hit  Return  sudo add-apt-repository ppa:ubuntugis/ppa && sudo apt-get update    Hit enter when prompted, then enter the following before again hitting the  Return  key:  sudo apt-get install gdal-bin    To verify after installation, try entering  ogrinfo  into the a terminal then press  Return . If the installation was successful, you will see something like this:  Usage: ogrinfo [--help-general] [-ro] [-q] [-where restricted_where]\n               [-spat xmin ymin xmax ymax] [-fid fid]\n               [-sql statement] [-al] [-so] [-fields={YES/NO}]\n               [-geom={YES/NO/SUMMARY}][--formats]\n               datasource_name [layer [layer ...]]    Proceed to  Installing Additonal R Packages     Hat-tip  We borrowed heavily from Sara Safavi to learn how to install  GDAL  on Ubuntu.\nShe provides an install guide  here .",
            "title": "Linux Users"
        },
        {
            "location": "/gis/#windows-users",
            "text": "Success  For once, Windows is ahead of the game. We only need to install R packages!",
            "title": "Windows Users"
        },
        {
            "location": "/gis/#installing-additional-r-packages",
            "text": "We will need some additional libraries to conduct our GIS analysis. Proceed as follows:   Open RStudio  In the  console , copy and paste the following:   uzh_gistools <- c(\"rgeos\", \"ggmap\", \"sf\",\n                    \"sp\", \"raster\", \"tmaptools\",\n                    \"rgdal\", \"gdalUtils\", \"mapview\", \"tmap\")\n\ninstall.packages(uzh_gistools)   rgdal problems with Mac  There were quite a few issues with GDAL and rgdal for Mac users.\nWe found  this  stackoverflow post that seemed to solve most problems.\nYou may find it useful in the problem",
            "title": "Installing Additional R Packages"
        },
        {
            "location": "/snakemake/",
            "text": "Snakemake\n\n\nSnakemake is an easy to use workflow management system.\nIt will allow us to control the execution of a set scripts by by running them from the command line.\nWe will use make to automate the execution of our research projects with a \"single click\" so that our entire work flow is reproducible.\n\n\n\n\nWhy a Tool to Manage Project's Execution?\n\n\nWe strongly believe in using build tools to manage the execution of a research project - and we hope that by the end of the course you do too.\n\n\nSome reasons we push this topic are:\n\n\n\n\nYour workflow / order of execution is explicitly documented.\n\n\nEach time you run Snakemake, it only executes each script if the output is expected to be different from the last time your ran it. That is, it runs 'partial builds.'\n\n\nIts written in Python, which minimizes the learning curve needed to pick up the essentials relatively small\n\n\nIt was designed for academic/professional research (in Bioformatics) so it feels more intuitive than most alternatives for our desired audience.\n\n\n\n\n\n\nInstallation\n\n\nSnakemake is a python package - so we can install using the default python installer, pip.\n\n\nIn a terminal window enter the command:\n\n\npip install snakemake\n\n\n\n\nfollowed by pressing the \nReturn\n key.\n\n\nVerify that your installation worked correctly by entering\n\n\nsnakemake --version\n\n\n\n\ninto a terminal and pressing \nReturn.\n\n\nThe expected output is the current version on the software, which should be greater than\n\n\n3.11.2",
            "title": "Build Tools"
        },
        {
            "location": "/snakemake/#snakemake",
            "text": "Snakemake is an easy to use workflow management system.\nIt will allow us to control the execution of a set scripts by by running them from the command line.\nWe will use make to automate the execution of our research projects with a \"single click\" so that our entire work flow is reproducible.   Why a Tool to Manage Project's Execution?  We strongly believe in using build tools to manage the execution of a research project - and we hope that by the end of the course you do too.  Some reasons we push this topic are:   Your workflow / order of execution is explicitly documented.  Each time you run Snakemake, it only executes each script if the output is expected to be different from the last time your ran it. That is, it runs 'partial builds.'  Its written in Python, which minimizes the learning curve needed to pick up the essentials relatively small  It was designed for academic/professional research (in Bioformatics) so it feels more intuitive than most alternatives for our desired audience.",
            "title": "Snakemake"
        },
        {
            "location": "/snakemake/#installation",
            "text": "Snakemake is a python package - so we can install using the default python installer, pip.  In a terminal window enter the command:  pip install snakemake  followed by pressing the  Return  key.  Verify that your installation worked correctly by entering  snakemake --version  into a terminal and pressing  Return.  The expected output is the current version on the software, which should be greater than  3.11.2",
            "title": "Installation"
        },
        {
            "location": "/sqlite/",
            "text": "Database Management with SQLite\n\n\nSQLite is a lightweight Relational Database Management System - it stores data in a specified format and uses the SQL language to work with the data.\nSQL style database management systems are a great way of storing data - particularly if your data is modestly large because it will not be stored in RAM as you work with it.\n\n\nWe chose to use SQLite because it involves the least set up, assumes no knowledge of server management and easily integrates with R and Python.\n\n\nFor Windows Users\n\n\nWe will install SQLite so that it plays nicely within Cygwin.\nIts time to go back to the \nsetup-x86_64.exe\n we told you not to delete. We will use it to install sqlite.\nProceed as follows:\n\n\n\n\nClick through the installation until you arrive at the page \"Select packages.\"\n\n\nChange 'View' from \nPending\n to \nNot Installed\n\n\nType \nsqlite\n into the search function and wait for the results to be filtered.\n\n\nFind the following lines:\n\n\nlibsqlite3_0\n\n\nsqlite3\n\n\n\n\n\n\nFor each line, click on the word 'Skip.' located next to each of these. 'Skip' should then be replaced with some numbers (the version which we will install)\n\n\nNow click on \"Next\" in the bottom right corner and continue accepting all options until the installation is complete.\n\n\n\n\n\n\nPartial Installation with Cygwin\n\n\nClicking through all the pages before and after \"Select Packages\", will \nnot\n install or modify anything you have done previously - it will only install the \nnew\n packages that you have selected.\n\n\n\n\nFor Mac Users\n\n\nOpen up a terminal and enter the following\n\n\nbrew install sqlite3\n\n\n\n\nThen hit the \nReturn\n key.\n\n\nFor Linux Users\n\n\nSQLite should already be installed on your system.\n\n\nVerifying the Installation\n\n\nTo check, open a terminal and then type (followed by hitting the return key):\n\n\nsqlite3 --version\n\n\n\n\nIf it is installed, you should see something similar to the following returned:\n\n\n3.15.2 2016-11-28 19:13:37\n\n\n\n\nThis is the version number that you have installed. Ensure that the version you have installed is \n3.10.1\n or higher.",
            "title": "SQLite"
        },
        {
            "location": "/sqlite/#database-management-with-sqlite",
            "text": "SQLite is a lightweight Relational Database Management System - it stores data in a specified format and uses the SQL language to work with the data.\nSQL style database management systems are a great way of storing data - particularly if your data is modestly large because it will not be stored in RAM as you work with it.  We chose to use SQLite because it involves the least set up, assumes no knowledge of server management and easily integrates with R and Python.",
            "title": "Database Management with SQLite"
        },
        {
            "location": "/sqlite/#for-windows-users",
            "text": "We will install SQLite so that it plays nicely within Cygwin.\nIts time to go back to the  setup-x86_64.exe  we told you not to delete. We will use it to install sqlite.\nProceed as follows:   Click through the installation until you arrive at the page \"Select packages.\"  Change 'View' from  Pending  to  Not Installed  Type  sqlite  into the search function and wait for the results to be filtered.  Find the following lines:  libsqlite3_0  sqlite3    For each line, click on the word 'Skip.' located next to each of these. 'Skip' should then be replaced with some numbers (the version which we will install)  Now click on \"Next\" in the bottom right corner and continue accepting all options until the installation is complete.    Partial Installation with Cygwin  Clicking through all the pages before and after \"Select Packages\", will  not  install or modify anything you have done previously - it will only install the  new  packages that you have selected.",
            "title": "For Windows Users"
        },
        {
            "location": "/sqlite/#for-mac-users",
            "text": "Open up a terminal and enter the following  brew install sqlite3  Then hit the  Return  key.",
            "title": "For Mac Users"
        },
        {
            "location": "/sqlite/#for-linux-users",
            "text": "SQLite should already be installed on your system.",
            "title": "For Linux Users"
        },
        {
            "location": "/sqlite/#verifying-the-installation",
            "text": "To check, open a terminal and then type (followed by hitting the return key):  sqlite3 --version  If it is installed, you should see something similar to the following returned:  3.15.2 2016-11-28 19:13:37  This is the version number that you have installed. Ensure that the version you have installed is  3.10.1  or higher.",
            "title": "Verifying the Installation"
        },
        {
            "location": "/pandoc/",
            "text": "Pandoc\n\n\nPandoc is an extremely useful 'swiss army knife' for converting between different types of markup languages from the command line.\nFor example, it readily builds PDFs with latex, and markdown - both of which are heavily used in academic research.\n\n\nWe do not actively teach how to use Pandoc in the course - but we will utilize it in some lessons where we produce PDF, Word or HTML output from plain text files.\n\n\nInstallation\n\n\n\n\nGo to the \nPandoc Homepage\n and follow the installation instructions for your operating system.\n\n\nLinux/Ubuntu users:\n alternatively \nsudo apt install pandoc\n will install pandoc from the command line\n\n\nMac users:\n alternatively \nbrew install pandoc\n will install pandoc from the command line\n\n\n\n\nVerify Your Install\n\n\nVerify your install by typing the following into a command line:\n\n\npandoc --version\n\n\n\n\nThe expected output starts with the following information:\n\n\npandoc 1.17.2\n\n\n\n\nEnsure you have at least version 1.15.1 installed.\n\n\n\n\n Windows PATH Setting redux\n\n\nBecause we want Pandoc available from the command line (it is by default for Mac and Linux), we again need to update our PATH settings.\n\n\nRight-click on Computer. Then go to \"Properties\" and select the tab \"Advanced System Settings\". Choose \"Environment Variables\" and select \nPath\n from the list of system variables.\n\n\nCheck whether the following path has been added:\n\n\n    ;C:\\Users\\username\\AppData\\Local\\Pandoc\n\n\n\nWindows 7 or 8 machines:\n\nIf it has not been, and you accepted all defaults during your installation, and didn't have any other non-default setting prior to starting this guide, copy and paste the following string without spaces at the start or end, updating the \nusername\n:\n\n\n    ;C:\\Users\\username\\AppData\\Local\\Pandoc\n\n\n\nWindows 10 machines:\n\nIf it has not been added, Click \nNew\n and paste the following string, updating the username:\n\n\n    C:\\Users\\username\\AppData\\Local\\Pandoc\n\n\n\nClick OK as often as needed.\n\n\nAfter you have done this, open a \nnew\n terminal and try and verify your install.",
            "title": "Pandoc"
        },
        {
            "location": "/pandoc/#pandoc",
            "text": "Pandoc is an extremely useful 'swiss army knife' for converting between different types of markup languages from the command line.\nFor example, it readily builds PDFs with latex, and markdown - both of which are heavily used in academic research.  We do not actively teach how to use Pandoc in the course - but we will utilize it in some lessons where we produce PDF, Word or HTML output from plain text files.",
            "title": "Pandoc"
        },
        {
            "location": "/pandoc/#installation",
            "text": "Go to the  Pandoc Homepage  and follow the installation instructions for your operating system.  Linux/Ubuntu users:  alternatively  sudo apt install pandoc  will install pandoc from the command line  Mac users:  alternatively  brew install pandoc  will install pandoc from the command line",
            "title": "Installation"
        },
        {
            "location": "/pandoc/#verify-your-install",
            "text": "Verify your install by typing the following into a command line:  pandoc --version  The expected output starts with the following information:  pandoc 1.17.2  Ensure you have at least version 1.15.1 installed.    Windows PATH Setting redux  Because we want Pandoc available from the command line (it is by default for Mac and Linux), we again need to update our PATH settings.  Right-click on Computer. Then go to \"Properties\" and select the tab \"Advanced System Settings\". Choose \"Environment Variables\" and select  Path  from the list of system variables.  Check whether the following path has been added:      ;C:\\Users\\username\\AppData\\Local\\Pandoc  Windows 7 or 8 machines: \nIf it has not been, and you accepted all defaults during your installation, and didn't have any other non-default setting prior to starting this guide, copy and paste the following string without spaces at the start or end, updating the  username :      ;C:\\Users\\username\\AppData\\Local\\Pandoc  Windows 10 machines: \nIf it has not been added, Click  New  and paste the following string, updating the username:      C:\\Users\\username\\AppData\\Local\\Pandoc  Click OK as often as needed.  After you have done this, open a  new  terminal and try and verify your install.",
            "title": "Verify Your Install"
        },
        {
            "location": "/contact/",
            "text": "Contact Us\n\n\nProgramming Practices Team\n\n\nProgramming Practices for Economics Research was created by\n\n\n\n\nLachlan Deer\n\n\nAdrian Etter\n\n\nJulian Langer\n\n\nMax Winkler\n\n\n\n\nat the Department of Economics, University of Zurich. This installation guide is for the 2017 edition conducted by the original course creators.\n\n\nQuestions or Comments?\n\n\nPlease contact us via email:\n\n\nprogramming \"AT\" econ.uzh.ch\n\n\n\n\nwith the title \"Installation Guide: Programming Practices for Research in Economics.\"\n\n\nWe look forward to hearing from you if you have questions about the installation guide, found this installation guide useful, or have further comments or suggestions to improve it.",
            "title": "Contact"
        },
        {
            "location": "/contact/#contact-us",
            "text": "",
            "title": "Contact Us"
        },
        {
            "location": "/contact/#programming-practices-team",
            "text": "Programming Practices for Economics Research was created by   Lachlan Deer  Adrian Etter  Julian Langer  Max Winkler   at the Department of Economics, University of Zurich. This installation guide is for the 2017 edition conducted by the original course creators.",
            "title": "Programming Practices Team"
        },
        {
            "location": "/contact/#questions-or-comments",
            "text": "Please contact us via email:  programming \"AT\" econ.uzh.ch  with the title \"Installation Guide: Programming Practices for Research in Economics.\"  We look forward to hearing from you if you have questions about the installation guide, found this installation guide useful, or have further comments or suggestions to improve it.",
            "title": "Questions or Comments?"
        },
        {
            "location": "/acknowledgement/",
            "text": "Acknowledgements\n\n\nThis course and installation guide is designed after and borrows a lot from:\n\n\n\n\nEffective Programming Practices for Economists\n, a course by \nHans-Martin von Gaudecker\n.\n\n\nA Guide to Setting Up a Python Environment for Economics Research\n, a website and installation guide by \nHans-Martin von Gaudecker\n.\n\n\nSoftware Carpentry\n and \nData Carpentry\n.\n\n\n\n\nThe material from above sources is made available under a \nCreative Commons By Attribution Share Alike License\n, as is this installation guide.",
            "title": "Acknowledgements"
        },
        {
            "location": "/acknowledgement/#acknowledgements",
            "text": "This course and installation guide is designed after and borrows a lot from:   Effective Programming Practices for Economists , a course by  Hans-Martin von Gaudecker .  A Guide to Setting Up a Python Environment for Economics Research , a website and installation guide by  Hans-Martin von Gaudecker .  Software Carpentry  and  Data Carpentry .   The material from above sources is made available under a  Creative Commons By Attribution Share Alike License , as is this installation guide.",
            "title": "Acknowledgements"
        }
    ]
}